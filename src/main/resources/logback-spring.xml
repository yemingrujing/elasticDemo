<?xml version="1.0" encoding="UTF-8" ?>

<!--日志配置   效果:不同级别日志配置到不同的日志文件中,且只输出自身级别的日志信息
                https://blog.csdn.net/tianyaleixiaowu/article/details/73327752
-->
<!--
日志级别查看 shift+ctrl+r ===> level    数值越大级别越高,重要性越大
    ERROR(40, "ERROR"),
    WARN(30, "WARN"),
    INFO(20, "INFO"),
    DEBUG(10, "DEBUG"),
    TRACE(0, "TRACE");
-->
<configuration>
    <property name="logger.path" value="D:/logs" />
    <property name="logstash.ip" value="localhost" />
    <property name="logstash.port" value="5044" />

    <!-- 彩色日志 -->
    <!-- 彩色日志依赖的渲染类 -->
    <conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
    <conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
    <conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
    <!-- 彩色日志格式 -->
    <property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{yyyy-MM-dd HH:mm:ss.SSS}){faint} %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>

    <!--配置日志输出格式-->
    <!--   简单配置项    将日志输出到控制台-->
    <appender name="consoleLog" class="ch.qos.logback.core.ConsoleAppender">    <!--ConsoleAppender,这个Appender将日志输出到console，更准确的说是System.out 或者System.err。-->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>info</level>
        </filter>
        <encoder>
            <Pattern>${CONSOLE_LOG_PATTERN}</Pattern>
            <charset>UTF-8</charset>
        </encoder>
    </appender>

    <appender name="logstash" class="net.logstash.logback.appender.LogstashTcpSocketAppender">
        <destination>${logstash.ip}:${logstash.port}</destination>
        <!-- encoder必须配置,有多种可选 -->
        <encoder charset="UTF-8" class="net.logstash.logback.encoder.LogstashEncoder" >
            <!-- "appName":"elastic_proj" 的作用是指定创建索引的名字时用，并且在生成的文档中会多了这个字段  -->
            <customFields>{"appName":"elastic_proj"}</customFields>
        </encoder>
        <!-- 向logstash输出日志如果有多个logstash IP或端口可以轮询负载各端口 -->
        <connectionStrategy>
            <roundRobin>
                <connectionTTL>5 minutes</connectionTTL>
            </roundRobin>
        </connectionStrategy>
    </appender>


    <!-- 配置debug级别日志,实现分离文件日志配置 -->
    <appender name="fileDebugLog" class="ch.qos.logback.core.rolling.RollingFileAppender">        <!--RollingFileAppender继承了FileAppender,提供了日志自动切换功能-->
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logger.path}/log_debug.log</file>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!-- 日志归档 -->
            <fileNamePattern>${logger.path}/log/%d{yyyy-MM-dd}/debug.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>5</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">  <!-- 设置过滤器掉了指定级别的日志-->
            <level>DEBUG</level>                     <!--设置拦截的对象为DEBUG级别日志-->
            <onMatch>ACCEPT</onMatch>                     <!-- 当遇到了DEBUG级别时,启用改段配置.-->
            <onMismatch>DENY</onMismatch>                     <!-- 没有遇到DEBUG级别日志时,屏蔽改段配置-->
        </filter>
    </appender>

    <!--分离配置Info级别日志-->
    <appender name="fileInfoLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logger.path}/log_info.log</file>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--设置滚动策略  按时间策略来生成日志-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--配置生成路径-->
            <fileNamePattern>${logger.path}/log/%d{yyyy-MM-dd}/info.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!--日志文件保留天数-->
            <maxHistory>5</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.LevelFilter">   <!--由于error的级别比info高,直接过滤不行,这里需要拦截掉error日志-->
            <level>INFO</level>                     <!--设置拦截的对象为INFO级别日志-->
            <onMatch>ACCEPT</onMatch>               <!-- 当遇到了info级别时,启用改段配置.-->
            <onMismatch>DENY</onMismatch>           <!-- 没有遇到info级别日志时,屏蔽改段配置-->
        </filter>
    </appender>


    <!-- 配置error级别日志,单独生成日志文件,跟info日志分离开来,且info日志文件只显示info级别日志,error级别日志只显示error日志 -->
    <!--日志分离需要用来过滤 filter-->
    <appender name="fileErrorLog" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!-- 正在记录的日志文件的路径及文件名 -->
        <file>${logger.path}/log_error.log</file>
        <encoder>
            <pattern>
                %d{yyyy-MM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{56}.%method:%L -%msg%n
            </pattern>
            <charset>UTF-8</charset>
        </encoder>
        <!--设置滚动策略  按时间策略来生成日志-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--配置生成路径-->
            <fileNamePattern>${logger.path}/log/%d{yyyy-MM-dd}/error.%i.log</fileNamePattern>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>10MB</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
            <!-- 控制保留的归档文件的最大数量，超出数量就删除旧文件，假设设置每个月滚动，且<maxHistory> 是1，则只保存最近1个月的文件，删除之前的旧文件-->
            <!--日志文件保留天数-->
            <maxHistory>5</maxHistory>
        </rollingPolicy>
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>ERROR</level>         <!-- ThresholdFilter过滤器,只有级别比ERROR高的日志才能被输出到error.%d.log文件中-->
        </filter>
    </appender>

    <!-- 1. 输出SQL 到控制台和文件-->
    <logger name="org.hibernate.SQL" additivity="false" >
        <level value="DEBUG" />
        <appender-ref ref="fileInfoLog" />
        <appender-ref ref="consoleLog" />
        <appender-ref ref="logstash" />
    </logger>

    <!-- 2. 输出SQL 的参数到控制台和文件-->
    <logger name="org.hibernate.type.descriptor.sql.BasicBinder" additivity="false" level="TRACE" >
        <level value="TRACE" />
        <appender-ref ref="fileInfoLog" />
        <appender-ref ref="consoleLog" />
        <appender-ref ref="logstash" />
    </logger>

    <!-- 配置项用处,设置这个项目下,日志级别为debug (引用一上日志配置)  -->
    <root level="info">                               <!--就是说在整个项目中,日志级别在info一上的日志都打印-->
        <appender-ref ref="logstash" />
        <appender-ref ref="fileInfoLog"/>
        <appender-ref ref="fileErrorLog"/>
        <appender-ref ref="fileDebugLog"/>
        <appender-ref ref="consoleLog"/>
    </root>
</configuration>