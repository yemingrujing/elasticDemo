server:
  port: 8080
  servlet:
    context-path: /
spring:
  datasource:
    url: jdbc:mysql://localhost:3306/commerce?serverTimezone=GMT%2B8&useUnicode=true&characterEncoding=UTF-8&zeroDateTimeBehavior=convertToNull&allowMultiQueries=true&useSSL=false
    username: root
    password: q123456789
  main:
    allow-bean-definition-overriding: true
  jpa:
    database: mysql
    database-platform: org.hibernate.dialect.MySQL8Dialect
    show-sql: true
    properties:
      # jpa打印sql语句
      hibernate:
        format_sql: true
    hibernate:
      ddl-auto: update
  redis:
    database: 0
    # Redis服务器地址
    host:
    # Redis服务器连接端口
    port: 6379
    # Redis服务器连接密码（默认为空）
    password:
    jedis:
      pool:
         # 连接池最大连接数（使用负值表示没有限制）
         max-active: 1000
         # 连接池中的最小空闲连接
         min-idle: 8
         # 连接池最大阻塞等待时间（使用负值表示没有限制）
         #max-wait: -1
         # 连接池中的最大空闲连接
         max-idle: 10
  rabbitmq:
    host:
    port: 5672
    username: yemingrujing
    password: gw123456
    virtual-host: /
    connection-timeout: 15000
    # 开启发送确认
    publisher-confirms: true
    # 开启发送失败退回
    publisher-returns: true
    # 与return机制结合配置次属性,return 的时候代表消息不可达，设置 broker 不自动删除该消息，
    # 而是返回到生产端，让我们进行一些后续的处理
    template:
      mandatory: true
      # 超时时间
      reply-timeout: 10000
      retry:
        # 设置为true的时候RabbitTemplate(生产端)能够实现重试
        enabled: true
        # 第一次与第二次发布消息的时间间隔 1000
        initial-interval: 1000
        # 尝试发布消息的最大数量 3
        max-attempts: 3
        # 尝试发布消息的最大时间间隔 10000
        max-interval: 10000
        # 上一次尝试时间间隔的乘数 1.0
        multiplier: 1.0
  data:
    mongodb:
      host:
      username: test
      password: q123456789
      port: 27017
      database: test
      repositories:
        type: auto
elasticsearch:
  hostname1:
  port1: 9200
  username:
  password:
# jpa日志打印sql参数
logging:
  level:
    org:
      hibernate:
        type:
          descriptor:
            sql:
              BasicBinder: trace